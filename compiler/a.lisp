(chimacho::in-package "CHIMACHO")

(defun %cadr (x)
  (car (cdr x)))
(defun %caddr (x)
  (car (cdr (cdr x))))
(defun %mapcar (f list)
  (if list
      (cons (funcall f (car list)) (%mapcar f (cdr list)))))
(defun %mapcar-test (fun args)
  (%mapcar (lambda (x) (+ x 1)) args))
(is 9 (let ((x (%mapcar-test #'print '(1 2 3))))
        (+ (car x) (%cadr x) (%caddr x))))

;;(defun objectify-application-symbol (fun args r f)
;;  (let ((fun (if (eq *package* (symbol-package fun))
;;                 (make-local-function fun)
;;                 (make-global-function fun)))
;;        (objected-args (list-to-arguments
;;                        (mapcar (lambda (x)
;;                                  (objectify x r f))
;;                                args))))
;;    (make-regular-application fun objected-args)))

(is 0 (+))
(is 1 (+ 1))
(is 3 (+ 1 2))
(is 6 (+ 1 2 3))

(let* ((x 10)
       (y x))
  (is 10 y))

(let* ((x 1)
       (y (+ x x)))
  (is 2 y))

(let ((x 1))
  (let* ((x 2)
         (y x))
    (is 2 y)))

(let ((x 1))
  (let ((x 2)
        (y x))
    (is 1 y)))

(defvar *x* "*x* is 701")

(defun foo ()
  (is ((lambda (x) (print x)) "start foo...")
      "start foo...")
  (is "*x* is 701" (print *x*))
  (let ((*x* "*x* is 702"))
    (is (print *x*) "*x* is 702")
    (bar '(hello "ç™¾")
         (lambda (x)
           (print "lambda")
           (print x))))
  (print *x*))

(defun bar (n f)
  (funcall f n)
  (print *x*)
  (let ((n 100))
    (setq *x* "*x* is 703")
    (print n)
    (setq n 99)
    (print n))
  (print n)
  (print *x*))

(defun my-list (&rest list)
  list)

(foo)
(print (my-list 11 22 33 44 55))
(funcall (function print) "function print!")
(funcall (function (lambda (x) (print x))) "function lambda!")
(print "ok")
