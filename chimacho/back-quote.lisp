(in-package :chimacho)

(defun read-back-quote (in)
  ;;(list 'back-quote (list 'quote ($read in))))
  (list 'back-quote ($read in)))

(defun read-comma (in)
  (list 'comma ($read in)))

(defun read-comma-at (in)
  (list 'comma-at ($read in)))

;;(defun back-quote (form)
(defmacro back-quote (form)
  (%back-quote form 0))

(defun %back-quote (form level)
  (cond ((atom form)
         (list 'quote form))
        ((eq 'comma (car form))
         (if (= 0 level)
             (cadr form)
             (%back-quote (cadr form) (- level 1))))
        ((eq 'comma-at (car form))
         ($error "invalid ,@"))
        ((eq 'back-quote (car form))
         (%back-quote (cadr form) (+ level 1)))
        ((atom (car form))
         (list 'cons (list 'quote (car form))
               (%back-quote (cdr form) level)))
        ((eq 'comma (caar form))
         (if (= 0 level)
             (list 'cons (cadar form)
                   (%back-quote (cdr form) level))
             (list 'cons (%back-quote (cadar form) (- level 1))
                   (%back-quote (cdr form) level))))
        ((eq 'comma-at (caar form))
         (if (= 0 level)
             (list 'append (cadar form)
                   (%back-quote (cdr form) level))
             (list 'append (%back-quote (cadar form) (- level 1))
                   (%back-quote (cdr form) level))))
        ((eq 'back-quote (caar form))
         (list 'cons (%back-quote (cadar form) (+ 1 level))
               (%back-quote (cdr form) level)))
        (t
         (list 'cons (%back-quote (car form) level)
               (%back-quote (cdr form) level)))))
